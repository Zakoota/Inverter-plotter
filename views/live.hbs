<style>
    .gauge-text {
        margin-right: 40px
    }

    .pl-10 {
        padding-left: 10rem
    }

    .pr-2 {
        padding-right: 2rem
    }

    .blinking {
        -webkit-animation: 2s blink ease infinite;
        -moz-animation: 2s blink ease infinite;
        -ms-animation: 2s blink ease infinite;
        -o-animation: 2s blink ease infinite;
        animation: 2s blink ease infinite
    }

    @keyframes "blink" {

        from,
        to {
            opacity: 0
        }

        50% {
            opacity: 1
        }
    }

    @-moz-keyframes blink {

        from,
        to {
            opacity: 0
        }

        50% {
            opacity: 1
        }
    }

    @-webkit-keyframes "blink" {

        from,
        to {
            opacity: 0
        }

        50% {
            opacity: 1
        }
    }

    @-ms-keyframes "blink" {

        from,
        to {
            opacity: 0
        }

        50% {
            opacity: 1
        }
    }

    @-o-keyframes "blink" {

        from,
        to {
            opacity: 0
        }

        50% {
            opacity: 1
        }
    }
    .voltReading{
        margin-left: 50px;
        font-size: large;
    font-size: 25px;
    color: black;
    }
</style>
<div class="row mt-2">
    <div class="row" style="position: absolute;
    right: 0%;
    top: 3%;">
        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
            Status
        </div>
        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
            <svg height="50" width="50" class="blinking">
                <circle id="status-light" cx="10" cy="10" r="10" fill="green"></circle>
                Sorry, your browser does not support inline SVG.
            </svg>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-lg-3">
            <div id="loadGauge1"></div>
        </div>
        <div class="col-md-3 col-lg-3">
            <div id="loadGauge2"></div>
        </div>
        <div class="col-md-3 col-lg-3">
            <div class="row" id="voltGauge" style="margin-left: 50px;"></div>
            <div class="voltReading row text-center"><span class="text">0</span> V</div>
        </div>
        <div class="col-md-3 col-lg-3">
            <div id="tempChart"></div>
        </div>
    </div>
    <div class="row">
        <div id="line-container"></div>
    </div>
</div>
<script src="/public/js/socket.io.js"></script>
<script src="/public/highcharts/highcharts.js"></script>
<script src="/public/highcharts/highcharts-more.js"></script>
<script src="/public/highcharts/modules/solid-gauge.js"></script>
<script src="/public/js/scripts.js"></script>
<script>
    var lineTickLimit = {{tickLimit}};
    Highcharts.setOptions({
        time: {
            timezoneOffset: -5 * 60
        }
    });
    var loadGaugesChart1 = Highcharts.chart('loadGauge1', Highcharts.merge(loadGaugesOptions, {
        yAxis: {
            min: 0,
            max: 100
        },

        credits: {
            enabled: false
        },

        series: [{
            data: [0],
            dataLabels: {
                format: '<div style="text-align:center">' +
                    '<span style="font-size:25px">{y}</span><br/>' +
                    '<span style="font-size:12px;opacity:0.4">Load in %-age</span>' +
                    '</div>'
            },
            tooltip: {
                valueSuffix: ' %'
            }
        }]

    }));
    var loadGaugesChart2 = Highcharts.chart('loadGauge2', Highcharts.merge(loadGaugesOptions, {
        yAxis: {
            min: 0,
            max: 5000
        },
        credits: {
            enabled: false
        },
        series: [{
            data: [0],
            dataLabels: {
                format: '<div style="text-align:center">' +
                    '<span style="font-size:25px">{y}</span><br/>' +
                    '<span style="font-size:12px;opacity:0.4">' +
                    'Load in Watts' +
                    '</span>' +
                    '</div>'
            },
            tooltip: {
                valueSuffix: ' Watts'
            }
        }]

    }));
    var lineChart = Highcharts.chart('line-container', Highcharts.merge(lineChartOpts, {}));
    var voltGauge = Highcharts.chart('voltGauge', Highcharts.merge(voltGaugeOpts,{}));
    var tempChart = Highcharts.chart('tempChart', Highcharts.merge(tempGaugeOptions, {
        yAxis: {
            min: 0,
            max: 80
        },
        credits: {
            enabled: false
        },
        series: [{
            name: 'inTemp',
            data: [0],
            dataLabels: {
                format: '<div style="position:absolute;text-align:center;top:-20px;left: -40px;"><span style="font-size:25px;color:' +
                    ((Highcharts.theme && Highcharts.theme.contrastTextColor) ||
                        'black') + '">{y} &deg;C</span><br/>' +
                    '<span style="font-size:12px;color:black">Inverter Temperature</span></div>'
            }
        }]
    }));
    window.charttick = 0

    function connect() {
        const socket = io.connect('{{wsurl}}');
        socket.on('connect', () => {
            $('#status-light').attr('fill', 'green');
            socket.send("Client connected");
        });

        /**
        * see file socket_out_format.txt in root for column order 
        */
        socket.on('data', (data) => {
            var data = JSON.parse(data);
            lineChart.series[0].addPoint([data[21], parseInt(data[5])], false, (window.charttick > lineTickLimit || window.charttick == 1));
            lineChart.series[1].addPoint([data[21], parseInt(data[6])], false, (window.charttick > lineTickLimit || window.charttick == 1));
            lineChart.series[2].addPoint([data[21], parseFloat(data[0])], false, (window.charttick > lineTickLimit || window.charttick == 1));
            lineChart.series[3].addPoint([data[21], parseFloat(data[8])], false, (window.charttick > lineTickLimit || window.charttick == 1));
            lineChart.series[4].addPoint([data[21], parseInt(data[11])], false, (window.charttick > lineTickLimit || window.charttick == 1));
            lineChart.redraw();
            if (window.charttick <= lineTickLimit) {
                window.charttick++;
            }
            tempChart.series[0].points[0].update(parseInt(data[11]));
            voltGauge.series[0].points[0].update(parseFloat(data[0]));
            $('.voltReading>.text').text(parseFloat(data[0]));
            loadGaugesChart1.series[0].points[0].update(parseInt(data[6]));
            loadGaugesChart2.series[0].points[0].update(parseInt(data[5]));
        });
        socket.on('disconnect', () => {
            setTimeout(function () {
                connect();
            }, 1000);
            $('#status-light').attr('fill', 'red');
        });
        socket.on('connect_error', () => {
            if (!window.alertSent) {
                alert("Graphs couldn't connect to server. Refresh!");
                window.alertSent = true;
            }
        });
    }
    connect();
</script>